{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Sample Template for the windows application stack",
  "Parameters": {
    "JenkinsNodename": {
      "Description": "Jenkins Node Name",
      "Type": "String"
    },
    "JenkinsSecret": {
      "Description": "Jenkins Secret",
      "Type": "String"
    },
    "JenkinsURL": {
      "Description": "Jenkins URL",
      "Type": "String"
    },
    "JenkinsPort": {
      "Description": "Jenkins Port",
      "Type": "Number",
      "Default": 8080
    },
    "OsVersion": {
      "Description": "Select the version of OS",
      "Type": "String",
      "AllowedValues": [
        "Windows2008r2",
        "Windows2012r2"
      ]
    },
    "InstanceType": {
      "Description": "Amazon EC2 instance type",
      "Type": "String",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro"
      ]
    },
    "VolCSize": {
      "Description": "Drive Size of Volume C",
      "Type": "Number",
      "Default": 30
    },
    "VolDRequired": {
      "Description": "True/False for VolD Required",
      "Type": "String",
      "AllowedValues": [
        true,
        false
      ],
      "Default": false
    },
    "VolDSize": {
      "Description": "Drive Size of Volume C",
      "Type": "Number",
      "Default": 5
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "Roles": {
      "Description": "A SPACE seperated list of roles that you want to enable on this instance. Valid values are AD-Certificate, AD-Domain-Services, ADLDS, DHCP, DNS, Fax, File-Services, NPAS, Print-Services, Web-Server, and WDS.",
      "Type": "String",
      "Default": "None",
      "AllowedPattern": "(((AD\\-Certificate)|(AD\\-Domain\\-Services)|(ADLDS)|(DHCP)|(DNS)|(Fax)|(File\\-Services)|(NPAS)|(Print\\-Services)|(Web\\-Server)|(WDS))( ((AD\\-Certificate)|(AD\\-Domain\\-Services)|(ADLDS)|(DHCP)|(DNS)|(Fax)|(File\\-Services)|(NPAS)|(Print\\-Services)|(Web\\-Server)|(WDS)))*)|(None)"
    },
    "Features": {
      "Description": "A SPACE seperated list of features that you want to enable on this instance. Valid values are NET-Framework, BITS, BitLocker, BranchCache, CMAK, Desktop-Experience, DAMC, Failover-Clustering, GPMC, Ink-Handwriting, Internet-Print-Client, ISNS, LPR-Port-Monitor, MSMQ, Multipath-IO, NLB, PNRP, qWave, Remote-Assistance, RDC, RPC-over-HTTP-Proxy, Simple-TCPIP, SMTP-Server, SNMP-Services, Storage-Mgr-SANS, Subsystem-UNIX-Apps, Telnet-Client, Telnet-Server, TFTP-Client, Biometric-Framework, Windows-Internal-DB, PowerShell-ISE, Backup-Features, Migration, WSRM, TIFF-IFilter, WinRM-IIS-Ext, WINS-Server, Wireless-Networking, and XPS-Viewer.",
      "Type": "String",
      "Default": "None",
      "AllowedPattern": "(((NET\\-Framework)|(BITS)|(BitLocker)|(BranchCache)|(CMAK)|(Desktop\\-Experience)|(DAMC)|(Failover\\-Clustering)|(GPMC)|(Ink\\-Handwriting)|(Internet\\-Print\\-Client)|(ISNS)|(LPR\\-Port\\-Monitor)|(MSMQ)|(Multipath\\-IO)|(NLB)|(PNRP)|(qWave)|(Remote\\-Assistance)|(RDC)|(RPC\\-over\\-HTTP\\-Proxy)|(Simple\\-TCPIP)|(SMTP\\-Server)|(SNMP\\-Services)|(Storage\\-Mgr\\-SANS)|(Subsystem\\-UNIX\\-Apps)|(Telnet\\-Client)|(Telnet\\-Server)|(TFTP\\-Client)|(Biometric\\-Framework)|(Windows\\-Internal\\-DB)|(PowerShell\\-ISE)|(Backup\\-Features)|(Migration)|(WSRM)|(TIFF\\-IFilter)|(WinRM\\-IIS\\-Ext)|(WINS\\-Server)|(Wireless\\-Networking)|(XPS\\-Viewer))( ((NET\\-Framework)|(BITS)|(BitLocker)|(BranchCache)|(CMAK)|(Desktop\\-Experience)|(DAMC)|(Failover\\-Clustering)|(GPMC)|(Ink\\-Handwriting)|(Internet\\-Print\\-Client)|(ISNS)|(LPR\\-Port\\-Monitor)|(MSMQ)|(Multipath\\-IO)|(NLB)|(PNRP)|(qWave)|(Remote\\-Assistance)|(RDC)|(RPC\\-over\\-HTTP\\-Proxy)|(Simple\\-TCPIP)|(SMTP\\-Server)|(SNMP\\-Services)|(Storage\\-Mgr\\-SANS)|(Subsystem\\-UNIX\\-Apps)|(Telnet\\-Client)|(Telnet\\-Server)|(TFTP\\-Client)|(Biometric\\-Framework)|(Windows\\-Internal\\-DB)|(PowerShell\\-ISE)|(Backup\\-Features)|(Migration)|(WSRM)|(TIFF\\-IFilter)|(WinRM\\-IIS\\-Ext)|(WINS\\-Server)|(Wireless\\-Networking)|(XPS\\-Viewer)))*( )*)|(None)"
    },
    "SourceCidrForRDP": {
      "Description": "IP Cidr from which you are likely to RDP into the instances. You can add rules later by modifying the created security groups e.g. 54.32.98.160/32",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$"
    }
  },
  "Conditions": {
    "VolDRequiredProvided": {
      "Fn::Equals": [
        {
          "Ref": "VolDRequired"
        },
        true
      ]
    }
  },
  "Mappings": {
    "AWSRegion2AMI": {
      "us-east-1": {
        "Windows2008r2": "ami-cf644fb4",
        "Windows2012r2": "ami-c6e9d9bd"
      },
      "us-west-2": {
        "Windows2008r2": "ami-6763831f",
        "Windows2012r2": "ami-3c4ba944"
      },
      "us-west-1": {
        "Windows2008r2": "ami-d5ddf6b5",
        "Windows2012r2": "ami-c52d07a5"
      },
      "eu-west-1": {
        "Windows2008r2": "ami-d3b040aa",
        "Windows2012r2": "ami-6dd02214"
      },
      "eu-west-2": {
        "Windows2008r2": "ami-b3e6f7d7",
        "Windows2012r2": "ami-fc8e9f98"
      },
      "eu-central-1": {
        "Windows2008r2": "ami-91e940fe",
        "Windows2012r2": "ami-8306afec"
      },
      "ap-northeast-1": {
        "Windows2008r2": "ami-afdd28c9",
        "Windows2012r2": "ami-c229dfa4"
      },
      "ap-northeast-2": {
        "Windows2008r2": "ami-2141984f",
        "Windows2012r2": "ami-098a5267"
      },
      "ap-southeast-1": {
        "Windows2008r2": "ami-6bc35808",
        "Windows2012r2": "ami-c87c19ab"
      },
      "ap-southeast-2": {
        "Windows2008r2": "ami-40a8b123",
        "Windows2012r2": "ami-46f1e925"
      },
      "ap-south-1": {
        "Windows2008r2": "ami-6a710b05",
        "Windows2012r2": "ami-82fe84ed"
      },
      "us-east-2": {
        "Windows2008r2": "ami-17ab8b72",
        "Windows2012r2": "ami-5d99b938"
      },
      "ca-central-1": {
        "Windows2008r2": "ami-4bcb752f",
        "Windows2012r2": "ami-20b50b44"
      },
      "sa-east-1": {
        "Windows2008r2": "ami-5fceb833",
        "Windows2012r2": "ami-f0b4c59c"
      },
      "cn-north-1": {
        "Windows2008r2": "ami-3bac7c56",
        "Windows2012r2": "ami-a0d909cd"
      }
    }
  },
  "Resources": {
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable RDP",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": {
              "Ref": "SourceCidrForRDP"
            }
          }
        ]
      }
    },
    "WindowsServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.WindowsServer.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r WindowsServer",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\ps\\jenkins-config.ps1": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "Param(",
                      " [string]$nodename,",
                      " [string]$secret,",
                      " [string]$jenkinsurl,",
                      " [int]$jenkinsport",
                      ")",
                      "# 1. Download/Extract curl",
                      "$curlurl = 'https://dl.uxnr.de/build/curl/curl_winssl_msys2_mingw32_stc/curl-7.53.1/curl-7.53.1.zip'",
                      "(New-Object -TypeName System.Net.WebClient).DownloadFile($curlurl,\"C:\\curl.zip\")",
                      "#Extracting Curl",
                      "Add-Type -assembly \"system.io.compression.filesystem\"",
                      "[io.compression.zipfile]::ExtractToDirectory(\"C:\\curl.zip\",\"C:\\curl\")",
                      "start-sleep -seconds 10",
                      "",
                      "#Downloading & Installing JRE",
                      "$jreurl = 'http://javadl.oracle.com/webapps/download/AutoDL?BundleId=225353_090f390dda5b47b9b721c7dfaa008135'",
                      "$env:Path = $env:Path + ';' + \"C:\\curl\\src\"",
                      "$curlargs = \"--location --verbose --url \"\"$jreurl\"\" --output \"\"C:\\jre.exe\"\"\"",
                      "& C:\\Windows\\System32\\cmd.exe /c \"curl $curlargs\"",
                      "",
                      "#start JRE Installation",
                      "& C:\\jre.exe /s",
                      "do{",
                      "    write-host \"Still Running Jre\"",
                      "    Start-Sleep -Seconds 10",
                      "}",
                      "while(get-process | ?{$_.Name -match 'jre'})",
                      "$jrepath = $(Get-ChildItem -Path 'C:\\Program Files (x86)\\Java' -Filter 'java.exe' -Recurse).Directory.FullName",
                      "",
                      "#Adding Jre path to $env:path",
                      "$env:Path += ';' + $jrepath",
                      "",
                      "#Download/Extracting NSSM",
                      "$nsslurl = 'http://nssm.cc/release/nssm-2.24.zip'",
                      "$curlargs = \"--verbose --location --url $nsslurl --output \"\"C:\\nssm.zip\"\"\"",
                      "& C:\\windows\\system32\\cmd.exe /c \"curl $curlargs\"",
                      "Start-Sleep -Seconds 10",
                      "[IO.Compression.zipfile]::ExtractToDirectory(\"C:\\nssm.zip\",\"C:\\\")",
                      "$env:path += ';' + \"C:\\nssm-2.24\\win32\"",
                      "Start-Sleep -Seconds 10",
                      "",
                      "#Downloading/Extracting NPP",
                      "$notepadurl = 'https://notepad-plus-plus.org/repository/7.x/7.5.1/npp.7.5.1.bin.zip'",
                      "$curlargs = \"--location --insecure --url $notepadurl --output \"\"C:\\npp.zip\"\"\"",
                      "& C:\\windows\\system32\\cmd.exe /c \"curl $curlargs\"",
                      "[IO.Compression.zipfile]::ExtractToDirectory(\"C:\\npp.zip\",\"C:\\npp\")",
                      "Start-Sleep -Seconds 10",
                      "",
                      "#Download the slave.jar from jenkins console",
                      "$slaveurl = \"$($jenkinsurl):$($jenkinsport)/jnlpJars/slave.jar\"",
                      "$curlargs = \"--verbose --location --url $slaveurl --output \"\"C:\\slave.jar\"\"\"",
                      "& C:\\windows\\system32\\cmd.exe /c \"curl $curlargs\"",
                      "Start-Sleep -Seconds 10",
                      "",
                      "#Creating a jenkins-slave service",
                      "$jenkinsdir = \"C:\\Jenkins\"",
                      "$jnlpurl = \"$($jenkinsurl):$($jenkinsport)/computer/$nodename/slave-agent.jnlp\"",
                      "$jarurl = \"java -jar C:\\slave.jar -jnlpUrl $jnlpurl -secret $secret -workDir \"\"$($jenkinsdir)\"\"\"",
                      "& C:\\windows\\system32\\cmd.exe /c \"nssm install jenkins-slave $jarurl\"",
                      "start-sleep -seconds 5",
                      "& C:\\windows\\system32\\cmd.exe /c \"nssm set jenkins-slave AppDirectory $jrepath\"",
                      "write-host $jarurl",
                      "",
                      "#Starting jenkins-slave service if its not started",
                      "if((Get-Service |?{$_.Name -match 'jenkins-slave'}).Status -ne 'Running'){",
                      "    Get-Service -name jenkins-slave | Start-Service -Verbose",
                      "}",
                      ""
                    ]
                  ]
                }
              }
            },
            "commands": {
              "1-Run-Jenkins-Config": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "powershell -file C:\\cfn\\ps\\jenkins-config.ps1 -nodename ",
                      {
                        "Ref": "JenkinsNodename"
                      },
                      " -secret ",
                      {
                        "Ref": "JenkinsSecret"
                      },
                      " -jenkinsurl ",
                      {
                        "Ref": "JenkinsURL"
                      },
                      " -jenkinsport ",
                      {
                        "Ref": "JenkinsPort"
                      }
                    ]
                  ]
                },
                "cwd": "C:\\"
              },
              "4-signal-success": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "cfn-signal.exe -e %ERRORLEVEL% \"",
                      {
                        "Fn::Base64": {
                          "Ref": "WindowsServerWaitHandle"
                        }
                      },
                      "\""
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": {
                "Ref": "VolCSize"
              },
              "VolumeType": "standard"
            }
          },
          {
            "Fn::If": [
              "VolDRequiredProvided",
              {
                "DeviceName": "/dev/xvdh",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": {
                    "Ref": "VolDSize"
                  },
                  "VolumeType": "standard"
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegion2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "OsVersion"
            }
          ]
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "cfn-init.exe -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r WindowsServer",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "</powershell>"
              ]
            ]
          }
        }
      }
    },
    "WindowsServerWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WindowsServerWaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "WindowsServer",
      "Properties": {
        "Handle": {
          "Ref": "WindowsServerWaitHandle"
        },
        "Timeout": "1800"
      }
    }
  },
  "Outputs": {
    "RolesEnabled": {
      "Value": {
        "Ref": "Roles"
      },
      "Description": "Roles enabled on this instance."
    },
    "FeaturesEnabled": {
      "Value": {
        "Ref": "Features"
      },
      "Description": "Features enabled on this instance."
    }
  }
}