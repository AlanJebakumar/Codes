{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Sample ASG Template",
  "Parameters": {
    "EnableLB": {
      "Type": "String",
      "Description": "True/False to enable LoadBalancer",
      "AllowedValues": [
        true,
        false
      ],
      "Default": false
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.nano",
      "AllowedValues": [
        "t2.nano",
        "t2.micro"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "TestNaren",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "OsVersion": {
      "Description": "Select the version of OS",
      "Type": "String",
      "AllowedValues": [
        "Windows2008r2",
        "Windows2012r2"
      ],
      "Default": "Windows2008r2"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "Subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },
    "VolCSize": {
      "Description": "Drive Size of Volume C",
      "Type": "Number",
      "Default": 30
    },
    "VolDRequired": {
      "Description": "True/False for VolD Required",
      "Type": "String",
      "AllowedValues": [
        true,
        false
      ],
      "Default": false
    },
    "VolDSize": {
      "Description": "Drive Size of Volume D",
      "Type": "Number",
      "Default": 5
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
    }
  },
  "Conditions": {
    "LBProvided": {
      "Fn::Equals": [
        {
          "Ref": "EnableLB"
        },
        true
      ]
    },
    "VolDRequiredProvided": {
      "Fn::Equals": [
        {
          "Ref": "VolDRequired"
        },
        true
      ]
    }
  },
  "Mappings": {
    "AWSRegion2AMI": {
      "us-east-1": {
        "Windows2008r2": "ami-de9e91c8",
        "Windows2012r2": "ami-c6e9d9bd"
      }
    }
  },
  "Resources": {
    "Ec2ASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": [
        "Ec2LC"
      ],
      "Properties": {
        "TargetGroupARNs": [
          {
            "Fn::If": [
              "LBProvided",
              {
                "Ref": "Ec2TG"
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "LaunchConfigurationName": {
          "Ref": "Ec2LC"
        },
        "MinSize": "1",
        "MaxSize": "1"
      }
    },
    "Ec2IP": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": [
        "Ec2SG"
      ],
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "Ec2IamRole"
          }
        ]
      }
    },
    "Ec2IamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Ec2FullAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "Ec2LC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [
        "Ec2SG"
      ],
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "config",
              "AppSetup"
            ]
          },
          "config": {
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.Ec2Instance.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r Ec2Instance",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\ps\\cfn-signal.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "& cfn-signal.exe -e 0 -s true -d \"done\" '",
                      {
                        "Ref": "Ec2WaitHandle"
                      },
                      "'\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\ps\\Rename.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$iid = $((Invoke-RestMethod -Uri http://169.254.169.254/latest/dynamic/instance-identity/document/).instanceId)",
                      "\n",
                      "Rename-Computer -Computername $env:Computername -NewName \"",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "-$($iid.Substring($iid.Length-3))\" -Force -verbose",
                      "\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\ps\\Install_IIS.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "if((get-module).Name -ne 'ServerManager'){\n",
                      " import-module -name awspowershell -force\n",
                      "}\n",
                      "#Adding Web-server role\n",
                      "Add-WindowsFeature -Name web-common-http,web-mgmt-console -IncludeAllSubFeature -Verbose -Restart\n",
                      "#Adding new SampleSite Directory\n",
                      "New-item -path C:\\SampleSite2 -ItemType Directory -Force -verbose\n",
                      "$html_Content = \"<html><head><title>$env:Computername</title></head><h2>Sample Site2 surving from $env:Computername at $(Invoke-RestMethod -Uri 'http://169.254.169.254/latest/meta-data/local-ipv4/')</h2> </html>\" | out-file -FilePath C:\\SampleSite2\\index.htm -Force -Verbose -Encoding utf8\n",
                      "$env:path += ';' + 'C:\\Windows\\system32\\inetsrv'\n",
                      "& cmd.exe /c \"appcmd.exe add app /site.name:\"\"Default Web Site\"\" /path:\"\"/samplesite2\"\" /physicalPath:\"\"C:\\Samplesite2\"\"\"\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          },
          "AppSetup": {
            "commands": {
              "1 - Rename Computer": {
                "command": "powershell -file c:\\cfn\\ps\\Rename.ps1"
              },
              "2 - Reboot Post NameChange": {
                "command": "shutdown.exe -r -f -t 30 -c \"Rebooting post Name Change\"",
                "waitAfterCompletion": "forever"
              },
              "3 - Install IIS and Create Samplesite": {
                "command": "powershell -file C:\\cfn\\ps\\Install_IIS.ps1"
              },
              "99-signal-success": {
                "command": "powershell -file C:\\cfn\\ps\\cfn-signal.ps1"
              }
            }
          }
        }
      },
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "Ec2IP"
        },
        "AssociatePublicIpAddress": true,
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": {
                "Ref": "VolCSize"
              },
              "VolumeType": "standard"
            }
          },
          {
            "Fn::If": [
              "VolDRequiredProvided",
              {
                "DeviceName": "/dev/xvdh",
                "Ebs": {
                  "DeleteOnTermination": true,
                  "VolumeSize": {
                    "Ref": "VolDSize"
                  },
                  "VolumeType": "standard"
                }
              },
              {
                "Ref": "AWS::NoValue"
              }
            ]
          }
        ],
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegion2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "OsVersion"
            }
          ]
        },
        "EbsOptimized": false,
        "SecurityGroups": [
          {
            "Ref": "Ec2SG"
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "InstanceMonitoring": false,
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "cfn-init.exe -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " --resource Ec2LC",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "</powershell>"
              ]
            ]
          }
        }
      }
    },
    "Ec2LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Condition": [
        "LBProvided"
      ],
      "DependsOn": [
        "Ec2LC"
      ],
      "Properties": {
        "Scheme": "internet-facing",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "Type": "network",
        "Subnets": {
          "Ref": "Subnets"
        },
        "IpAddressType": "ipv4"
      }
    },
    "Ec2SG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP from the load balancer only",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": {
              "Ref": "SSHLocation"
            },
            "Description": "RDP"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "SSHLocation"
            },
            "Description": "HTTP"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "Ec2TG": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Condition": [
        "LBProvided"
      ],
      "DependsOn": [
        "Ec2LC"
      ],
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 5,
        "Port": 80,
        "Protocol": "TCP",
        "UnhealthyThresholdCount": 5,
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "Ec2WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "Ec2SG",
      "Properties": {
        "Handle": {
          "Ref": "Ec2WaitHandle"
        },
        "Timeout": "2700",
        "Count": 1
      }
    },
    "Ec2WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "LBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Condition": [
        "LBProvided"
      ],
      "DependsOn": [
        "Ec2LC"
      ],
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "Ec2TG"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "Ec2LoadBalancer"
        },
        "Port": "80",
        "Protocol": "TCP"
      }
    }
  },
  "Outputs": {}
}