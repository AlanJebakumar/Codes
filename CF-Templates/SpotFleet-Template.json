{
  "Parameters": {
    "ForceUpdate": {
      "Type": "String",
      "Description": "Enable/Disable ForceUpdate",
      "AllowedValues": [
        true,
        false
      ],
      "Default": true
    },
    "CurrentDateTime": {
      "Type": "String",
      "Description": "Enter Current Date Time in \"mm/dd/yyyyTHH:MM\" format to Enable ForceUpdate"
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "TestNaren",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "ImageId": {
      "Type": "String",
      "Description": "AMI-ID",
      "Default": "ami-1c4f1c66"
    },
    "InstanceType": {
      "Type": "String",
      "Description": "InstanceType",
      "AllowedValues": [
        "t2.micro"
      ],
      "Default": "t2.micro"
    },
    "SpotPrice": {
      "Type": "String",
      "Description": "Max Bidding Price"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
    }
  },
  "Conditions": {
    "isForceUpdate": {
      "Fn::Equals": [
        {
          "Ref": "ForceUpdate"
        },
        true
      ]
    }
  },
  "Resources": {
    "Ec2IP": {
      "Type": "AWS::IAM::InstanceProfile",
      "DependsOn": [
        "Ec2SG"
      ],
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "Ec2IamRole"
          }
        ]
      }
    },
    "Ec2IamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Ec2FullAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:Describe*",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:*",
                  "Resource": [
                    "arn:aws:s3:::devopslab-cts",
                    "arn:aws:s3:::devopslab-cts/*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "CloudformationDiscovery",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:List*",
                    "cloudformation:Describe*"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "Ec2SG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP from the load balancer only",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": {
              "Ref": "SSHLocation"
            },
            "Description": "RDP"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "SSHLocation"
            },
            "Description": "HTTP"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5985",
            "ToPort": "5985",
            "CidrIp": {
              "Ref": "SSHLocation"
            },
            "Description": "WinRM-HTTP"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5986",
            "ToPort": "5986",
            "CidrIp": {
              "Ref": "SSHLocation"
            },
            "Description": "WinRM-HTTPS"
          }
        ],
        "VpcId": {
          "Ref": "VpcId"
        }
      }
    },
    "Ec2WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "Ec2SG",
      "Properties": {
        "Handle": {
          "Ref": "Ec2WaitHandle"
        },
        "Timeout": "3600",
        "Count": 1
      }
    },
    "Ec2WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "ec2spot": {
      "Type": "AWS::EC2::SpotFleet",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "c:\\cfn\\cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.Ec2Instance.Metadata.AWS::CloudFormation::Init\n",
                      "action=cfn-init.exe -v -s ",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " -r Ec2Instance",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\ps\\cfn-signal.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      " & cfn-signal.exe --success true -d \"done\" '",
                      {
                        "Ref": "Ec2WaitHandle"
                      },
                      "'\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\ps\\Prep.ps1": {
                "source": "https://s3.amazonaws.com/devopslab-cts/Scripts/Prep.ps1"
              },
              "C:\\cfn\\ps\\Prep-WinRM.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#Turn Off Firewall for all profiles\n",
                      "& NetSh Advfirewall set allprofiles state off\n",
                      "#Adding HTTP Transport for winrm\n",
                      "& winrm create winrm/config/listener?Address=*+Transport=HTTP\n",
                      "#Enabling winrm on http traffic\n",
                      "& winrm quickconfig -transport:http -force\n",
                      "#Retreive winrm Identity\n",
                      "& winrm id\n",
                      "#Setting basic auth of \"winrm/config/client/auth\" to true\n",
                      "& winrm set winrm/config/client/auth '@{Basic=\"true\"}'\n",
                      "#Setting service/auth to true\n",
                      "& winrm set winrm/config/service/auth '@{Basic=\"true\"}'\n",
                      "#Setting config/service to true\n",
                      "& winrm set winrm/config/service '@{AllowUnencrypted=\"true\"}'\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\ps\\Rename.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$iid = $((Invoke-RestMethod -Uri http://169.254.169.254/latest/dynamic/instance-identity/document/).instanceId)",
                      "\n",
                      "Rename-Computer -Computername $env:Computername -NewName \"",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "-$($iid.Substring($iid.Length-3))\" -Force -verbose",
                      "\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\ps\\AppInstall.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "$deploypath = $Env:temp\\Deploypath\n",
                      "New-item -path $deploypath -itemType Directory -force -verbose\n"
                    ]
                  ]
                }
              },
              "C:\\cfn\\ps\\Install_IIS.ps1": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "if((get-module).Name -ne 'ServerManager'){\n",
                      " import-module -name awspowershell -force\n",
                      "}\n",
                      "#Adding Web-server role\n",
                      "Add-WindowsFeature -Name web-common-http,web-mgmt-console -IncludeAllSubFeature -Verbose -Restart\n",
                      "#Adding new SampleSite Directory\n",
                      "New-item -path C:\\SampleSite2 -ItemType Directory -Force -verbose\n",
                      "\"<html>\n",
                      "<head>\n",
                      "<script type=\"\"text/JavaScript\"\">\n",
                      " <!--\n",
                      " function AutoRefresh(t){\n",
                      "   setTimeOut(\"\"location.reload(true);\"\",t)\n",
                      " }\n",
                      " -->\n",
                      "</script>\n",
                      "</head>\n",
                      "<body onload=\"\"JavaScript:AutoRefresh(5000);\"\"\n",
                      "<h2>Sample Site2 serving from $env:Computername at $(Invoke-RestMethod -Uri 'http://169.254.169.254/latest/meta-data/local-ipv4/')</h2>\n",
                      "Refreshing every 5 secs\n",
                      "</body>\n",
                      "</html>\" | out-file -FilePath C:\\SampleSite2\\index.htm -Force -Verbose -Encoding utf8\n",
                      "& setx /m path \"$env:Path;C:\\Windows\\system32\\inetsrv\"\n",
                      "$env:path += ';' + 'C:\\Windows\\system32\\inetsrv'\n",
                      "& cmd.exe /c \"appcmd.exe add app /site.name:\"\"Default Web Site\"\" /path:\"\"/samplesite2\"\" /physicalPath:\"\"C:\\Samplesite2\"\"\"\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "windows": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "c:\\cfn\\cfn-hup.conf",
                    "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
                  ]
                }
              }
            },
            "commands": {
              "1-RenameComputer": {
                "command": "powershell -file c:\\cfn\\ps\\Rename.ps1"
              },
              "2 - Reboot Post NameChange": {
                "command": "shutdown.exe -r -f -t 30 -c \"Rebooting post Name Change\"",
                "waitAfterCompletion": "forever"
              },
              "99-SendCSignal": {
                "command": "powershell -file c:\\cfn\\ps\\cfn-signal.ps1"
              }
            }
          }
        }
      },
      "Properties": {
        "SpotFleetRequestConfigData": {
          "IamFleetRole": "arn:aws:iam::336361235864:role/aws-ec2-spot-fleet-tagging-role",
          "LaunchSpecifications": [
            {
              "IamInstanceProfile": {
                "Arn": {
                  "Fn::GetAtt": [
                    "Ec2IP",
                    "Arn"
                  ]
                }
              },
              "KeyName": {
                "Ref": "KeyName"
              },
              "ImageId": {
                "Ref": "ImageId"
              },
              "InstanceType": {
                "Ref": "InstanceType"
              },
              "UserData": {
                "Fn::Base64": {
                  "Fn::Join": [
                    "",
                    [
                      "<powershell>\n",
                      {
                        "Fn::If": [
                          "isForceUpdate",
                          {
                            "Fn::Join": [
                              "",
                              [
                                "write-output -inputObject \"",
                                {
                                  "Ref": "CurrentDateTime"
                                },
                                " -Force Update is set to True\""
                              ]
                            ]
                          },
                          "write-output -inputObject \"ForceUpdate is set to False\""
                        ]
                      },
                      "& tzutil /s \"Eastern Standard Time\"\n",
                      "cfn-init.exe --verbose --stack=",
                      {
                        "Ref": "AWS::StackName"
                      },
                      " --resource ec2spot",
                      " --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "</powershell>"
                    ]
                  ]
                }
              },
              "SecurityGroups": [
                {
                  "GroupId": {
                    "Ref": "Ec2SG"
                  }
                }
              ]
            }
          ],
          "TargetCapacity": 1,
          "AllocationStrategy": "lowestPrice",
          "ExcessCapacityTerminationPolicy": "default",
          "ReplaceUnhealthyInstances": true,
          "SpotPrice": {
            "Ref": "SpotPrice"
          },
          "TerminateInstancesWithExpiration": false,
          "Type": "maintain"
        }
      }
    }
  }
}